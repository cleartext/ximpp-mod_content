	[{"contains", fun(Msg, Phrase, "drop", _Direction, _Host) ->
										 case string:str(Msg, Phrase) of
											 0 -> 
												 {keep, Msg};
											 _ ->
												 drop
										 end;			
									(Msg, Phrase, "block", _Direction, _Host) ->                 	
										{keep, content_utils:block(Msg, Phrase, "*")}  	
		end
	 },
	 
	 {"equals", fun(Msg, Phrase, "drop", _Direction, _Host) ->
									 case Msg =:= Phrase of
										 true -> drop;
										 false -> {keep, Msg}
									 end;
								(Msg, Phrase, "block", _Direction, _Host) ->                 	
									{keep, content_utils:block(Msg, Phrase, "*")}                	
		end
	 },
	 
	 {"contains_all", fun(Msg, Words, "drop", _Direction, _Host) ->
												 WordList = string:tokens(Words, ";"),
												 ContainsAll = lists:all(fun(W) -> string:str(Msg, W) > 0 end, WordList),
												 case ContainsAll of 
													 true -> drop;
													 false -> {keep, Msg}
												 end;	
											(Msg, Words, "block", _Direction, _Host) ->
												WordList = string:tokens(Words, ";"),
												NewMsg = lists:foldl(fun(W, M) -> content_utils:block(M, W, "*") end, Msg, WordList),
												{keep, NewMsg}                	                  
		end
	 },
	 
	 {"contains_any", fun(Msg, Words, "drop", _Direction, _Host) ->
												 WordList = string:tokens(Words, ";"),
												 ContainsAny = lists:any(fun(W) -> string:str(Msg, W) > 0 end, WordList),
												 case ContainsAny of 
													 true -> drop;
													 false -> {keep, Msg}
												 end;	
											(Msg, Words, "block", _Direction, _Host) ->
												WordList = string:tokens(Words, ";"),
												NewMsg = lists:foldl(fun(W, M) -> content_utils:block(M, W, "*") end, Msg, WordList),
												{keep, NewMsg} 
		end
	 },
	 
	 {"check_urls", fun(Msg, Rule, Action, _Direction, Host) ->

											 URLs = brightcloud_utils:extract_urls(Msg),
											 case URLs of
											 [] -> {keep, Msg};
											 _ ->
												 Predicate = brightcloud_utils:compile_rule(Rule),						  
												 ScoresFunc = fun(URL) -> Predicate(mod_brightcloud:get_scores(Host, URL)) end,
												 case Action of 
													 "drop" -> 
														 case lists:any(fun(S) -> ScoresFunc(S) end, URLs) of
															 true -> drop;
															 false -> {keep, Msg}
														 end;	
													 "block" -> 	
														 NewMsg = lists:foldl(fun(U, M) -> content_utils:block(M, U, "*") end, Msg, URLs),
														 {keep, NewMsg}
												 end
											 end	 
		end			 
	 }
	].	
	
